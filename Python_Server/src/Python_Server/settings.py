"""
Django settings for Python_Server project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-_prj5(_4i4sqf!3zpl-#*7glvu)5^ve-93+s+8^8m+uu@p))q0'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    # # 主要作用是提供一个基于Web的管理界面，用于管理网站的内容和用户。它提供了一种简单的方式来创建、编辑和删除网站的内容，而不需要编写任何代码。
    # 'django.contrib.admin',
    # # 主要作用是提供用户认证功能，包括用户注册、登录、注销、密码重置等。它还提供了一种方式来管理用户的权限和角色。
    # 'django.contrib.auth',
    # # 主要作用是提供对网站内容的类型和关系的支持。它允许你定义模型，这些模型可以表示网站中的各种内容，如文章、评论、用户等。
    # 'django.contrib.contenttypes',
    # # 主要作用是提供对网站会话的支持。它允许你存储和检索用户在网站上的会话信息，如用户的登录状态、购物车内容等。
    # 'django.contrib.sessions',
    # # 主要作用是提供对网站消息的支持。它允许你发送和接收消息，如通知、错误消息等。
    # 'django.contrib.messages',
    # # 主要作用是提供对网站静态文件的支持。它允许你定义静态文件，如CSS、JavaScript、图片等，并将它们提供给用户。
    # 'django.contrib.staticfiles',
    # 跨CORS问题
    "corsheaders",
    'apps.authlogin',
    'apps.food',
    'apps.home',
    'apps.order',
    'apps.other',
    'apps.role',
    'apps.settings',
    'apps.user',
]

MIDDLEWARE = [
    # 添加请求日志中间件
    'middleware.loggingmiddleware.LoggingMiddleware',
    # 解决跨CORS问题
    "corsheaders.middleware.CorsMiddleware",
    # 提供安全功能，如强制 HTTPS（配合 SECURE_* 设置使用）以及其他安全增强功能。
    'django.middleware.security.SecurityMiddleware',
    # # 主要作用是处理用户的会话。它允许你存储和检索用户在网站上的会话信息，如用户的登录状态、购物车内容等。
    # 'django.contrib.sessions.middleware.SessionMiddleware',
    # 主要作用是处理网站的请求和响应。它允许你定义网站的 URL 路径，并将请求路由到相应的视图函数。
    'django.middleware.common.CommonMiddleware',
    # # 主要作用是处理跨站请求伪造（CSRF）攻击。它允许你防止恶意用户伪造请求来攻击你的网站。
    # 'django.middleware.csrf.CsrfViewMiddleware',
    # # 主要作用是处理用户的认证。它允许你管理用户的登录、注销、权限和角色等。
    # 'django.contrib.auth.middleware.AuthenticationMiddleware',
    # # 主要作用是处理网站的消息。它允许你发送和接收消息，如通知、错误消息等。
    # 'django.contrib.messages.middleware.MessageMiddleware',
    # 主要作用是防止点击劫持攻击。它允许你防止恶意用户在你的网站上嵌入其他网站的内容。
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 添加认证中间件
    'middleware.authmiddleware.AuthMiddleWare',
    
    
]
# TODO: 添加跨CORS问题
# ===============================================
CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_METHODS = [
    'GET',
    'POST',
    'PUT',
    'DELETE',
]
# ================================================
  
ROOT_URLCONF = 'Python_Server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                # 在模板中提供调试相关的变量（如 {{ debug }}），仅在 DEBUG=True 时生效，通常用于开发环境。
                'django.template.context_processors.debug',
                # 将当前请求对象 request 添加到模板上下文中，使得模板中可以直接访问 request 对象。
                'django.template.context_processors.request',
                # 将当前用户信息（request.user）和权限相关的变量添加到模板上下文中，用于处理用户身份验证和权限。
                'django.contrib.auth.context_processors.auth',
                # 将消息框架的消息变量添加到模板上下文中，使得模板可以显示消息通知（如成功或失败的提示信息）。
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Python_Server.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'vul_server_py',
        'USER': 'root',
        'PASSWORD': '123456',
        'HOST': 'localhost',
        'PORT': 3306,
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# 前端构建后的静态资源文件目录
FRONTEND_DIST_DIR = os.path.join(BASE_DIR, "static")

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#####################################################################################

# 替换为你的密钥
JWT_SECRET_KEY = ""
# 算法
JWT_ALGORITHM = "HS256"
# 文件上传位置
UPLOAD_FOLDER = os.path.join(STATIC_URL, "uploads/")
# 数据库备份位置
BACKUP_FOLDER = os.path.join(STATIC_URL, "backupdb/")
# 日志文件位置
LOG_FILE = os.path.join(STATIC_URL, "log/")

# 日志配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOG_FILE, 'syslog.log'),
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# local_settings
try:
    from .local_settings import *
except ImportError:
    pass